{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import type { SequentialIdOptions } from '@supademo/rrweb-plugin-sequential-id-record';\nimport type { ReplayPlugin } from '@supademo/rrweb';\nimport type { eventWithTime } from '@supademo/rrweb-types';\n\ntype Options = SequentialIdOptions & {\n  warnOnMissingId: boolean;\n};\n\nconst defaultOptions: Options = {\n  key: '_sid',\n  warnOnMissingId: true,\n};\n\nexport const getReplaySequentialIdPlugin: (\n  options?: Partial<Options>,\n) => ReplayPlugin = (options) => {\n  const { key, warnOnMissingId } = options\n    ? Object.assign({}, defaultOptions, options)\n    : defaultOptions;\n  let currentId = 1;\n\n  return {\n    handler(event: eventWithTime) {\n      if (key in event) {\n        const id = (event as unknown as Record<string, number>)[key];\n        if (id !== currentId) {\n          console.error(\n            `[sequential-id-plugin]: expect to get an id with value \"${currentId}\", but got \"${id}\"`,\n          );\n        } else {\n          currentId++;\n        }\n      } else if (warnOnMissingId) {\n        console.warn(\n          `[sequential-id-plugin]: failed to get id in key: \"${key}\"`,\n        );\n      }\n    },\n  };\n};\n"],
  "mappings": ";gFAQA,MAAMA,EAA0B,CAC9B,IAAK,OACL,gBAAiB,EACnB,EAEaC,EAEQC,GAAY,CACzB,KAAA,CAAE,IAAAC,EAAK,gBAAAC,CAAoB,EAAAF,EAC7B,OAAO,OAAO,CAAA,EAAIF,EAAgBE,CAAO,EACzCF,EACJ,IAAIK,EAAY,EAET,MAAA,CACL,QAAQC,EAAsB,CAC5B,GAAIH,KAAOG,EAAO,CACV,MAAAC,EAAMD,EAA4CH,CAAG,EACvDI,IAAOF,EACD,QAAA,MACN,2DAA2DA,CAAS,eAAeE,CAAE,GACvF,EAEAF,GAAA,MAEOD,GACD,QAAA,KACN,qDAAqDD,CAAG,GAC1D,CACF,CAEJ,CACF",
  "names": ["defaultOptions", "getReplaySequentialIdPlugin", "options", "key", "warnOnMissingId", "currentId", "event", "id"]
}
